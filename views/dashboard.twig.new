<div class="dashboard-container">
	<div class="container">
		<div class="item">
			<div id="agent-info">
				<div class="avatar level-icon-75 {{ faction_class }} l{{ agent.level }}"/>
				<div class="about">
					<div class="name {{ faction_class }}">{{ agent.name }}</div>
					<div class="level">LVL <span>{{ agent.level }}</span></div>
					<div class="ap"><span class="current">{{ attribute(agent.stats, 'ap')|number_format }}</span> AP</div>
				</div>
				<div class="badges" />
			</div>
		</div>
	</div>

	<div class="container">
		<div class="item">
			<h3>Upcoming Badges</h3>
			<div id="upcoming_badges">
				<div class="upcoming-badge">
					<div class="badge">
						<div class="badge-name"/>
						<div class="badge-image progress-overlay">
							<div class="badge-icon badge-icon-75" data-progress=""/>
							<p class="percent-complete"><span/> <span>complete</span></p>
						</div>
					</div>
					<div class="time-remaining"><span></span> days remaining</div>
				</div>
			</div>
		</div>

		<div class="item">
			<h3>AP Breakdown</h3>
			<div id="ap_breakdown"></div>
		</div>
	</div>

	<div class="container">
{% for stat in stats if stat.graphable %}
		<div class="item prediction {{ stat.stat }}">
			<h3>{{ stat.name }}</h3>
			<div class="summary">
				<div class="current-badge">
					<div class="badge">
						<div class="badge-image badge-icon-75" />
					</div>
				</div>
				<div class="next-badge">
					<div class="badge">
						<div class="badge-image progress-overlay">
							<div class="badge-icon badge-icon-75" />
							<p class="percent-complete">
								<span />
							</p>
						</div>
					</div>
				</div>
				<p class="badge-prediction" />
				<p class="rate" />
			</div>
			<div id="graph-{{ stat.stat }}">
			</div>
		</div>
{% endfor %}
	</div>
</div>
<script>
function onPageLoad() {
	$.ajax({url: StatTracker.baseUrl + "data/badges/upcoming",
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving your upcoming badges");
			}
		},
		success: function(data) {
			tmpl = $(".upcoming-badge").clone();
			$("#upcoming_badges").html("");
			data.forEach(function(badge, i, arr) {
				html = tmpl.clone();
				$(html).find(".badge-icon").addClass(badge.name.toLowerCase().replace("_", ""))
				                           .addClass(badge.level)
				                           .css("opacity", badge.progress / 1.5);
				$(html).find(".percent-complete span").html(Math.floor(badge.progress * 100) +"%");
				if (badge.days_remaining == null) {
					$(html).find(".time-remaining").remove();
				}
				else {
					$(html).find(".time-remaining span").html(badge.days_remaining);
				}
				$("#upcoming_badges").append(html);
			});
		}
	});

	$.ajax({url: StatTracker.baseUrl + "data/ap/breakdown",
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving the graph for AP Breakdown.");
			}
		},
		success: function(data) {
			CHART_WIDTH_MAX = 300;
			CONTAINER_WIDTH_MAX = 500;
			dataTable = google.visualization.arrayToDataTable(data);
			containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
			left = (containerWidth - CHART_WIDTH_MAX) / 2;
			left = left < 0 ? 0 : left;
			chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;
			new google.visualization.PieChart(document.getElementById('ap_breakdown')).draw(
				dataTable, {
				backgroundColor: '#000000',
				fontSize: '14',
				height: containerWidth,
				width: containerWidth,
				chartArea: {
					top: left,
					left: left,
					width: chartWidth,
					height: chartWidth
				},
				legend: {
					position: 'none'
				},
				tooltip: {
					text: 'value'
				}
			});
		}
	});
{% for stat in stats if stat.graphable %}
	$.ajax({url: StatTracker.baseUrl + "data/{{ stat.stat }}/graph",
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving the graph for {{ stat.name }}.");
			}
		},
		success: function(data) {
			if (data.prediction.rate == null) {
				$(".prediction.{{ stat.stat }}").hide();
			}
			else if (data.prediction.badge != "" && data.prediction.badge != "Level") {
				$(".prediction.{{ stat.stat }} .current-badge .badge-icon-75").addClass(data.prediction.badge.toLowerCase().replace(" ", ""));
				$(".prediction.{{ stat.stat }} .current-badge .badge-icon-75").addClass(data.prediction.current.toLowerCase());
				$(".prediction.{{ stat.stat }} .next-badge .badge-icon-75").addClass(data.prediction.badge.toLowerCase().replace(" ", ""));
				$(".prediction.{{ stat.stat }} .next-badge .badge-icon-75").addClass(data.prediction.next.toLowerCase());
				$(".prediction.{{ stat.stat }} .next-badge .badge-icon-75").css("opacity", data.prediction.progress / 1.5);
				$(".prediction.{{ stat.stat }} .next-badge .percent-complete span").html(Math.floor(data.prediction.progress * 100) +"%");

				msg = "";
				if ("{{ stat.stat }} == "ap") {
					msg = "You have " + data.prediction.amount_remaining + " " + data.prediction.unit + " remaining for level " + data.prediction.next + ".<p/>At your average rate of " + data.prediction.rate + " per day, that should take " + data.prediction.days_remaining + " days";
				}
				else {
					msg = "You have " + data.prediction.amount_remaining + " " + data.prediction.unit + " remaining for the " + data.prediction.next + " badge.<p/>At your average rate of " + data.prediction.rate + " per day, that should take " + data.prediction.days_remaining + " days";
				}

				$(".prediction.{{ stat.stat }} .badge-prediction").html(msg);
			}
			else {
				$(".prediction.{{ stat.stat }} .summary .current-badge").hide();
				$(".prediction.{{ stat.stat }} .summary .next-badge").hide();
				$(".prediction.{{ stat.stat }} .rate").html("Your average rate is " + data.prediction.rate + " " + data.prediction.unit + " per day.");
			}

			dataTable = google.visualization.arrayToDataTable(data.graph);
			CHART_WIDTH_MAX = 400;
			CONTAINER_WIDTH_MAX = 500;
			containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
			left = (containerWidth - CHART_WIDTH_MAX) / 2;
			left = left < 0 ? 0 : left;
			chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;

			new google.visualization.LineChart(document.getElementById('graph-{{ stat.stat }}')).draw(
				dataTable, {
				backgroundColor: '#000000',
				height: containerWidth,
				pointSize: 5,
				width: containerWidth,
				chartArea: {
					top: 10,
					left: 60,
					width: chartWidth
				},
				legend: {
					position: "in",
					textStyle: {
						color: '#00bbb1'
					}
				},
				series: {
					0: {
						color: '{{ faction_color }}'
					},
					1: { 
						pointSize: 0
					}
				},
				hAxis: {
					title: "Date",
					slantedText: true,
					textStyle: {
						color: '#00bbb1'
					},
					titleTextStyle: {
						color: '#00bbb1'
					}
				},
				vAxis: {
					title: "{{ stat.name }}",
					textStyle : {
						color: '#00bbb1'
					},
					titleTextStyle: {
						color: '#00bbb1'
					}
				}
			});
		}
	});
{% endfor %}
}
</script>
