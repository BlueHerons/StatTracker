<div class="container">

{% for ratio in agent.getRatios() %}
    <div class="item">
        <a name="{{ratio.stat1.stat}}-{{ratio.stat2.stat}}" />
        <h3>{{ratio.stat1.name}} : {{ratio.stat2.name}}</h3>
        <div id="trend_{{ratio.stat1.stat}}-{{ratio.stat2.stat}}" class="trend">
            <div class="ratio">
                <div class="badges">
                    <div class="badge-display badge-1">
                        <div class="badge-image badge-icon-75 {{ratio.stat1.badge|lower|replace({"_":""})}} {{ratio.stat1.level|lower}}" />
                        <div class="badge-name">{{ratio.stat1.nickname}}</div>
                    </div>
                    <div class="seperator">:</div>
                    <div class="badge-display badge-2">
                        <div class="badge-image badge-icon-75 {{ratio.stat2.badge|lower|replace({"_":""})}} {{ratio.stat2.level|lower}}" />
                        <div class="badge-name">{{ratio.stat2.nickname}}</div>
                    </div>
                </div>
            </div>
	    <div class="graph-selector">
	        <span class="graph-link link active" data-stat1="{{ ratio.stat1.stat }}" data-stat2="{{ ratio.stat2.stat }}" data-what="trend" data-when="0">All time</span>
		<!-- &nbsp;|&nbsp;
		<span class="graph-link link" data-stat1="{{ ratio.stat1.stat }}" data-stat2="{{ ratio.stat2.stat }}" data-what="trend" data-when="30">Past 30 days</span>
		&nbsp;|&nbsp;
		<span class="graph-link link" data-stat1="{{ ratio.stat1.stat }}" data-stat2="{{ ratio.stat2.stat }}" data-what="trend" data-when="7">Past 7 days</span>-->
            </div>

            <div class="text">For every {{ max(0, ratio.ratio) }} {{ratio.stat1.unit}}, you have 1 {{ratio.stat2.unit}}.</div>
            <div class="graph" />
            <div class="loading 110" />
        </div>
    </div>
{% endfor %}
</div>
<script>
function onPageLoad() {

    function loadTempGraph(stat1, stat2, factor, ratio) {
        $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/distribution/" + stat1 + "/" + stat2 + "/" + factor,
            data: { ts: '{{ agent.update_time }}' },
            dataType: "json",
            error: function(xhr) {
                $("#trend_"+stat1+"-"+stat2+" .graph").html("").addClass("message error").html("There was an error retrieving trends. (" + xhr.status + ")");
            },
            success: function(data) {
                breaks = [];
                if (data.distribution.breaks.length > 0) {
                    for (i in data.distribution.breaks) {
                        o = {};
                        o.from = data.distribution.breaks[i][0];
                        o.to = data.distribution.breaks[i][1];
                    }
                }
                $("#trend_"+data.stat.stat1+"-"+data.stat.stat2+" .loading").hide();
                $("#trend_"+data.stat.stat1+"-"+data.stat.stat2+" .graph").highcharts({
                    chart: {
                        backgroundColor: "#000",
                        plotBackgroundColor: "#000",
                        type: "areaspline"
                    },
                    credits: { enabled: false },
                    plotOptions: {
                        areaspline: {
                            color: "{{ faction_color }}"
                        }
                    },
                    title: { text: null },
                    series: [{
                        data: data.distribution.count,
                        name: "# of agents"
                    }],
                    xAxis: {
                        name: "x-axis name",
                        breaks: breaks,
                        categories: data.distribution.steps,
                        labels: {
                        },
                        plotLines: [{
                            color: "orange",
                            dashStyle: "line",
                            value: ratio / factor,
                            width: 2,
                            zIndex: 7,
                            label: {
                                text: ratio,
                                style: {
                                    color: "orange",
                                }
                            }
                        }],
                        startOnTick: true,
                        tickPlacement: "between"
                    },
                    yAxis: {
                        min: 0,
                        title: { text: "# of agents" }
                    }
                    
                });
                console.log(data);
            }
        });
    }

    {% for ratio in agent.getRatios() %}
    loadTempGraph("{{ratio.stat1.stat}}", "{{ratio.stat2.stat}}", {{ ratio.step }}, {{ max(0, ratio.ratio) }});
    {% endfor %}
}
</script>
