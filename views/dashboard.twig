{% set chartLabelColor = "#04EAF5" %}
<div class="dashboard-container">
    <div class="container">
        <div class="item">
            <div id="agent-info">
                <div class="avatar level-icon-75 {{ faction_class }} l{{ agent.level }}"/>
                <div class="about">
                    <div class="name {{ faction_class }}">{{ agent.name }}</div>
                    <div class="level">LVL <span>{{ agent.level }}</span></div>
                    <div class="ap"><span class="current">{{ attribute(agent.stats, 'ap')|number_format }}</span> AP</div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="item">
            <h3>Upcoming Badges</h3>
            <div id="upcoming_badges">
                <div class="upcoming-badge">
                    <div class="badge-display">
                        <div class="badge-image badge-icon-75 progress-overlay" />
                        <p class="percent-complete">
                            <span>?%</span>
                            <span>complete</span>
                        </p>
                    </div>
                    <div class="time-remaining">
                        <span class="days">?</span> days remaining<br/>
                        <span class="target-date"/>
                    </div>
                </div>
            </div>
        </div>

        <div class="item">
            <h3>Ratios</h3>
            <div id="ratios">
                <div class="ratio">
                    <div class="badges">
                        <div class="badge-display badge-1">
                            <div class="badge-image badge-icon-75" />
                        </div>
                        <div class="seperator">:</div>
                        <div class="badge-display badge-2">
                            <div class="badge-image badge-icon-75" />
                        </div>
                    </div>
                    <div class="value" />
                </div>
            </div>
        </div>

        <div class="item">
            <h3>AP Breakdown</h3>
            <div class="graph-selector">
	        <span class="graph-link ap-breakdown link" data-stat="ap-breakdown" data-what="graph" data-when="0">All Time</span>
		&nbsp;|&nbsp;
		<span class="graph-link ap-breakdown link" data-stat="ap-breakdown" data-what="trend" data-when="30">Past 30 Days</span>
		&nbsp;|&nbsp;
		<span class="graph-link ap-breakdown link" data-stat="ap-breakdown" data-what="trend" data-when="7">Past 7 Days</span>
            </div>
            <div id="ap_breakdown"></div>
            <div class="loading 110" />
        </div>
    </div>

    <div class="container">
{% for stat in stats if stat.graphable and stat.badges|length > 0 %}
    {% include 'stat_graph.twig' %}
{% endfor %}
{% for stat in stats if stat.graphable and stat.badges|length == 0 %}
    {% include 'stat_graph.twig' %}
{% endfor %}
    </div>
</div>
<script>
function onPageLoad() {
    $("span.graph-link[data-what='graph']").addClass("active");

    $("span.graph-link").click(function() {
        stat = $(this).attr("data-stat");
        $("span.graph-link[data-stat='" + stat + "']").removeClass("active");
        $(this).addClass("active");
        if (stat == "ap-breakdown") {
            getAPBreakdown($(this).attr("data-when"));
        }
        else {
            $("#graph-" + stat).empty();
            $("#graph-" + stat).after($("<div/>").addClass("loading 110"));
            loadStatGraph(stat, "", $(this).attr("data-what"), $(this).attr("data-when"));
        }
    });

    var apBreakdownChart;

    $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/badges/upcoming?limit=5",
        data: { ts: '{{ agent.update_time }}' },
        dataType: "json",
        error: function(xhr) {
            $("#upcoming_badges").html("").addClass("message error").html("There was an error retrieving your upcoming badges. (" + xhr.status + ")");
        },
        success: function(data) {
            tmpl = $(".upcoming-badge").clone();
            $("#upcoming_badges").html("");
            data.forEach(function(badge, i, arr) {
                html = tmpl.clone();
                $(html).find(".badge-image").addClass(badge.name.toLowerCase().replace("_", ""))
                                           .addClass(badge.level)
                                           .css("opacity", badge.progress / 1.5);
                $(html).find(".percent-complete span").html(Math.floor(badge.progress * 100) +"%");
                if (badge.days_remaining == null) {
                    $(html).find(".time-remaining").remove();
                }
                else {
                    $(html).find(".time-remaining span.days").html(format(badge.days_remaining));
                    $(html).find(".time-remaining span.target-date").html(badge.target_date_local);
                }
                $("#upcoming_badges").append(html);
            });
        }
    });

    $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/ratios",
        data: { ts: '{{ agent.update_time }}' },
        dataType: "json",
        error: function(xhr) {
            $("#ratios").html("").addClass("message error").html("There was an error retrieving your ratios. (" + xhr.status + ")");
        },
        success: function(data) {
            tmpl = $(".ratio").clone();
            $("#ratios").html("");
            data.forEach(function(ratio, i, arr) {
                html = tmpl.clone();
                ratio.stat1.badge = ratio.stat1.badge.replace("_", "");
                ratio.stat2.badge = ratio.stat2.badge.replace("_", "");

                if (ratio.stat1.badge == "level") {
                    ratio.stat1.level = "level-icon-75 {{faction_class}} l" + ratio.stat1.level;
                }

                if (ratio.stat2.badge == "level") {
                    ratio.stat2.level = "level-icon-75 {{faction_class}} l" + ratio.stat2.level;
                }

                $(html).find(".badge-1 .badge-image").addClass(ratio.stat1.badge)
                                                     .addClass(ratio.stat1.level)
                                                                     .attr("title", ratio.stat1.name);
                $(html).find(".badge-2 .badge-image").addClass(ratio.stat2.badge)
                                                           .addClass(ratio.stat2.level)
                                                     .attr("title", ratio.stat2.name);
                $(html).find(".value").html(format(ratio.ratio));

                $("#ratios").append(html);
            });
        }
    });

    function getAPBreakdown(days) {
        $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/ap/breakdown/" + days,
            data: { ts: '{{ agent.update_time }}' },
            dataType: "json",
            error: function(xhr) {
                $("#ap_breakdown + div.loading").remove();
                $("#ap_breakdown").html("").addClass("message error").html("There was an error retrieving your AP breakdown. (" + xhr.status + ")");
            },
            success: function(response) {
                if (apBreakdownChart == null) {
                    $("#ap_breakdown + div.loading").remove();
                    CHART_WIDTH_MAX = 300;
                    CONTAINER_WIDTH_MAX = 500;
                    containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
                    left = (containerWidth - CHART_WIDTH_MAX) / 2;
                    left = left < 0 ? 0 : left;
                    chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;
    
                    $("#ap_breakdown").highcharts({
                        chart: {
                            backgroundColor: "#000",
                            plotBackgroundColor: "#000"
                        },
                        colors: response.slice_colors,
                        credits: {
                            enabled: false
                        },
                        title : {
                            text: null
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                cursor: "pointer",
                                dataLabels: {
                                    distance: -40,
                                    enabled: true,
                                    format: "{percentage:.2f}%"
                                }
                            }
                        },
                        series: [{
                            type: "pie",
                            animation: false,
                            name: "AP",
                            data: response.data
                        }]
                    });
                    apBreakdownChart = $("#ap_breakdown").highcharts();
                }
                else {
                    console.log(response);
                    for (i in response.data) {
                        apBreakdownChart.series[0].data[i].update(response.data[i][1]);
                    }
                }
            }
        });
    }
    
    function loadStatPrediction(stat, name) {
        $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/" + stat +"/prediction",
            data: { ts: '{{ agent.update_time }}' },
            dataType: "json",
            error: function(xhr) {
                $(".prediction." + stat + " .summary").html("").addClass("message error").html("There was an error retrieving your prediction. (" + xhr.status + ")");
            },
            success: function(prediction) {
                if (prediction.rate == null) {
                    $(".prediction." + stat).hide();
                }
                else if (prediction.badge != null) {
                    $(".prediction." + stat + " .next-badge .badge-image + .percent-complete span").html(Math.floor(prediction.progress * 100) +"%");

                    if (prediction.next == null) {
                        $(".prediction." + stat + " .next-badge").hide();
                        $(".prediction." + stat + " .summary .badge-remaining").hide();
                        $(".prediction." + stat + " .summary .badge-prediction").hide();
                        $(".prediction." + stat + " .summary .rate .amount").html(format(prediction.rate));
                        $(".prediction." + stat + " .summary .rate .unit").html(prediction.unit);
                    }
                    else {
                        $(".prediction." + stat + " .summary .rate").hide();
                        $(".prediction." + stat + " .summary .badge-remaining .amount").html(format(prediction.amount_remaining));
                        $(".prediction." + stat + " .summary .badge-remaining .unit").html(prediction.unit);
                        $(".prediction." + stat + " .summary .badge-remaining .badge-level").html(prediction.next);
                        $(".prediction." + stat + " .summary .badge-remaining .badge-name").html(prediction.badge);
                        $(".prediction." + stat + " .summary .badge-prediction .amount").html(format(prediction.rate));
                        $(".prediction." + stat + " .summary .badge-prediction .days-remaining").html(format(prediction.days_remaining));
                    }

                    if (prediction.badge == "Level") {
                        $(".prediction." + stat + " .current-badge .badge-image").removeClass("badge-icon-75");
                        $(".prediction." + stat + " .next-badge .badge-image").removeClass("badge-icon-75");
                        $(".prediction." + stat + " .current-badge .badge-image").addClass("level-icon-75");
                        $(".prediction." + stat + " .next-badge .badge-image").addClass("level-icon-75");

                        $(".prediction." + stat + " .current-badge .level-icon-75").addClass("{{ faction_class }}");
                        $(".prediction." + stat + " .current-badge .level-icon-75").addClass("l" + prediction.current);

                        if (prediction.next != null) {                       
                            $(".prediction." + stat + " .next-badge .level-icon-75").addClass("{{ faction_class }}");
                            $(".prediction." + stat + " .next-badge .level-icon-75").addClass("l" + prediction.next);
                            $(".prediction." + stat + " .next-badge .level-icon-75").css("opacity", prediction.progress / 1.5);    
                        }
                    }
                    else {
                        $(".prediction." + stat + " .current-badge .badge-icon-75").addClass(prediction.badge.toLowerCase().replace(" ", ""));
                        $(".prediction." + stat + " .current-badge .badge-icon-75").addClass(prediction.current.toString().toLowerCase());

                        if (prediction.next != null) {
                            $(".prediction." + stat + " .next-badge .badge-icon-75").addClass(prediction.badge.toString().toLowerCase().replace(" ", ""));
                            $(".prediction." + stat + " .next-badge .badge-icon-75").addClass(prediction.next.toString().toLowerCase());
                            $(".prediction." + stat + " .next-badge .badge-icon-75").css("opacity", prediction.progress / 1.5);
                        }
                    }
                }
                else {
                    $(".prediction." + stat + " .summary .current-badge").hide();
                    $(".prediction." + stat + " .summary .next-badge").hide();
                    $(".prediction." + stat + " .badge-remaining").hide()
                    $(".prediction." + stat + " .badge-prediction").hide();
                    $(".prediction." + stat + " .rate .amount").html(format(prediction.rate));
                    $(".prediction." + stat + " .rate .unit").html(prediction.unit);    
                }
            }
        });
    }
        
    function loadStatGraph(stat, name, what, when) {
        $.ajax({url: "{{ app.request.basepath }}/api/{{ agent.token }}/" + stat +"/" + what + ((when == null || when == "") ? "" : "/" + when),
            data: { ts: '{{ agent.update_time }}' },
            dataType: "json",
            error: function(xhr) {
                $("#graph-" + stat + " + div.loading").remove();
                $("#graph-" + stat).html("").addClass("message error").html("There was an error retrieving the graph. (" + xhr.status + ")");
            },
            success: function(response) {
                $("#graph-" + stat + " + div.loading").remove();

                CHART_WIDTH_MAX = 400;
                CONTAINER_WIDTH_MAX = 500;
                containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
                left = (containerWidth - CHART_WIDTH_MAX) / 2;
                left = left < 0 ? 0 : left;
                chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;
                
                switch (what) {
                    case "trend":
                        $("#graph-" + stat).highcharts({
                            chart: {
                                backgroundColor: "#000",
                                plotBackgroundColor: "#000"
                            },
                            credits: { enabled: false },
                            legend : {
                                align: "left",
                                floating: true,
                                itemStyle : {
                                    color: "#FFF",
                                    fontWeight: "normal"
                                },
                                itemHoverStyle: { color: "#FFF" },
                                layout: "vertical",
                                verticalAlign: "top",
                                x: 75
                            },
                            title : { text: null },
                            plotOptions: {
                                column: {
                                    color: "{{ faction_color }}"
                                },
                                spline: {
                                    color: "#DC3912",
                                    marker: { enabled: false }
                                }
                            },
                            series: [{
                                    type: "column",
                                    data: response.value,
                                    name: "Gained",
                                }, {
                                    type: "spline",
                                    data: response.target,
                                    name: "Target",
                                }],
                            xAxis: {
                                categories: response.dates,
                                labels: {
                                    rotation: -40,
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    }
                                },
                                lineColor: "{{ chartLabelColor }}",
                                tickColor: "{{ chartLabelColor }}"
                            },
                            yAxis: {
                                gridLineColor: "{{ chartLabelColor }}",
                                labels: {
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    }
                                },
                                lineColor: "{{ chartLabelColor }}",
                                title: {
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    },
                                    text: name
                                }
                            }
                        });
                        break;
                    case "graph":
                        dates = response.data.shift();
                        response.data[0].color = "{{ faction_color }}";
                        response.data[0].marker = { "enabled" : true };
                        response.data[1].color = "#DC3912";
                        response.data[1].marker = { "enabled" : false };

                        $("#graph-" + stat).highcharts({
                            chart: {
                                backgroundColor: "#000",
                                plotBackgroundColor: "#000"
                            },
                            credits: { enabled: false },
                            legend : {
                                align: "left",
                                floating: true,
                                itemStyle : {
                                    color: "#FFF",
                                    fontWeight: "normal"
                                },
                                itemHoverStyle: { color: "#FFF" },
                                layout: "vertical",
                                verticalAlign: "top",
                                x: 75
                            },
                            title : { text: null },
                            series: [ response.data[1], response.data[0] ],
                            xAxis: {
                                categories: dates.data,
                                labels: {
                                    rotation: -40,
                                    step: 4,
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    }
                                },
                                lineColor: "{{ chartLabelColor }}",
                                tickColor: "{{ chartLabelColor }}"
                            },
                            yAxis: {
                                gridLineColor: "{{ chartLabelColor }}",
                                labels: {
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    }
                                },
                                lineColor: "{{ chartLabelColor }}",
                                title: {
                                    style: {
                                        color: "{{ chartLabelColor }}"
                                    },
                                    text: null
                                }
                            }
                        });
                        break;
                }
            }
        });
    }

    getAPBreakdown(0);

{% for stat in stats if stat.graphable %}
    loadStatPrediction("{{ stat.stat }}", "{{ stat.name }}");
    loadStatGraph("{{ stat.stat}}", "{{ stat.name }}", "graph", null);
{% endfor %}
}
</script>
