{% set chartLabelColor = "#04EAF5" %}
<div class="dashboard-container">
	<div class="container">
		<div class="item">
			<div id="agent-info">
				<div class="avatar level-icon-75 {{ faction_class }} l{{ agent.level }}"/>
				<div class="about">
					<div class="name {{ faction_class }}">{{ agent.name }}</div>
					<div class="level">LVL <span>{{ agent.level }}</span></div>
					<div class="ap"><span class="current">{{ attribute(agent.stats, 'ap')|number_format }}</span> AP</div>
				</div>
				<div class="badges" />
			</div>
		</div>
	</div>

	<div class="container">
		<div class="item">
			<h3>Upcoming Badges</h3>
			<div id="upcoming_badges">
				<div class="upcoming-badge">
					<div class="badge">
						<div class="badge-image badge-icon-75 progress-overlay" />
						<p class="percent-complete">
							<span />
							<span>complete</span>
						</p>
					</div>
					<div class="time-remaining"><span></span> days remaining</div>
				</div>
			</div>
		</div>

		<div class="item">
			<h3>Ratios</h3>
			<div id="ratios">
				<div class="ratio">
					<div class="badges">
						<div class="badge badge-1">
							<div class="badge-image badge-icon-75" />
						</div>
						<div class="seperator">:</div>
						<div class="badge badge-2">
							<div class="badge-image badge-icon-75" />
						</div>
					</div>
					<div class="value" />
				</div>
			</div>
		</div>

		<div class="item">
			<h3>AP Breakdown</h3>
			<div id="ap_breakdown"></div>
		</div>
	</div>

	<div class="container">
{% for stat in stats if stat.graphable %}
		<div class="item prediction {{ stat.stat }}">
			<h3>{{ stat.name }}</h3>
			<div class="summary">
				<div class="current-badge">
					<div class="badge">
						<div class="badge-image badge-icon-75" />
					</div>
				</div>
				<div class="next-badge">
					<div class="badge">
						<div class="badge-image badge-icon-75 progress-overlay" />
						<p class="percent-complete">
							<span />
						</p>
					</div>
				</div>
				<p class="badge-prediction" />
				<p class="rate" />
			</div>
			<div id="graph-{{ stat.stat }}">
			</div>
		</div>
{% endfor %}
	</div>
</div>
<script>
function onPageLoad() {
	$.ajax({url: StatTracker.baseUrl + "api/{{ agent.auth_code }}/badges/upcoming",
		data: { ts: '{{ agent.latest_update }}' },
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving your upcoming badges");
			}
		},
		success: function(data) {
			tmpl = $(".upcoming-badge").clone();
			$("#upcoming_badges").html("");
			data.forEach(function(badge, i, arr) {
				html = tmpl.clone();
				$(html).find(".badge-image").addClass(badge.name.toLowerCase().replace("_", ""))
				                           .addClass(badge.level)
				                           .css("opacity", badge.progress / 1.5);
				$(html).find(".percent-complete span").html(Math.floor(badge.progress * 100) +"%");
				if (badge.days_remaining == null) {
					$(html).find(".time-remaining").remove();
				}
				else {
					$(html).find(".time-remaining span").html(badge.days_remaining);
				}
				$("#upcoming_badges").append(html);
			});
		}
	});

	$.ajax({url: StatTracker.baseUrl + "api/{{ agent.auth_code }}/ratios",
		data: { ts: '{{ agent.latest_update }}' },
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving your ratios");
			}
		},
		success: function(data) {
			tmpl = $(".ratio").clone();
			$("#ratios").html("");
			data.forEach(function(ratio, i, arr) {
				html = tmpl.clone();
				$(html).find(".badge-1 .badge-image").addClass(ratio.stat1.badge.replace("_", ""))
				                                     .addClass(ratio.stat1.level)
                                                                     .attr("title", ratio.stat1.name);
				$(html).find(".badge-2 .badge-image").addClass(ratio.stat2.badge.replace("_", ""))
                      				                     .addClass(ratio.stat2.level)
				                                     .attr("title", ratio.stat2.name);
				$(html).find(".value").html(ratio.ratio);

				$("#ratios").append(html);
			});
		}
	});

	$.ajax({url: StatTracker.baseUrl + "api/{{ agent.auth_code }}/ap/breakdown",
		data: { ts: '{{ agent.latest_update }}' },
		dataType: "json",
		statusCode: {
			500: function() {
				alert("There was an error retrieving the graph for AP Breakdown.");
			}
		},
		success: function(response) {
			CHART_WIDTH_MAX = 300;
			CONTAINER_WIDTH_MAX = 500;
			containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
			left = (containerWidth - CHART_WIDTH_MAX) / 2;
			left = left < 0 ? 0 : left;
			chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;

			$("#ap_breakdown").highcharts({
				chart: {
					backgroundColor: "#000",
					plotBackgroundColor: "#000"
				},
				colors: response.slice_colors,
				credits: {
					enabled: false
				},
				title : {
					text: null
				},
				plotOptions: {
					pie: {
						allowPointSelect: true,
						cursor: "pointer",
						dataLabels: {
							distance: -40,
							enabled: true,
							format: "{percentage:.2f}%"
						}
					}
				},
				series: [{
					type: "pie",
					name: "AP",
					data: response.data
				}]
			});
		}
	});

	function loadStatPrediction(stat, name) {
		$.ajax({url: StatTracker.baseUrl + "api/{{ agent.auth_code }}/" + stat +"/graph",
			data: { ts: '{{ agent.latest_update }}' },
			dataType: "json",
			statusCode: {
				500: function() {
					alert("There was an error retrieving the graph for " + name + ".");
				}
			},
			success: function(data) {
				if (data.prediction.rate == null) {
					$(".prediction." + stat).hide();
				}
				else if (data.prediction.badge != null) {
				
					$(".prediction." + stat + " .next-badge .badge-image + .percent-complete span").html(Math.floor(data.prediction.progress * 100) +"%");

					if (data.prediction.next == null) {
						$(".prediction." + stat + " .next-badge").hide();
					}

					msg = "";
					if (data.prediction.badge == "Level") {
						$(".prediction." + stat + " .current-badge .badge-image").removeClass("badge-icon-75");
						$(".prediction." + stat + " .next-badge .badge-image").removeClass("badge-icon-75");
						$(".prediction." + stat + " .current-badge .badge-image").addClass("level-icon-75");
						$(".prediction." + stat + " .next-badge .badge-image").addClass("level-icon-75");

						$(".prediction." + stat + " .current-badge .level-icon-75").addClass("{{ faction_class }}");
						$(".prediction." + stat + " .current-badge .level-icon-75").addClass("l" + data.prediction.current);
						$(".prediction." + stat + " .next-badge .level-icon-75").addClass("{{ faction_class }}");
						$(".prediction." + stat + " .next-badge .level-icon-75").addClass("l" + data.prediction.next);
						$(".prediction." + stat + " .next-badge .level-icon-75").css("opacity", data.prediction.progress / 1.5);	
						msg = "You have " + data.prediction.amount_remaining + " " + data.prediction.unit + " remaining for level " + data.prediction.next + ".<p/>At your average rate of " + data.prediction.rate + " per day, that should take " + data.prediction.days_remaining + " days.";
					}
					else {
						$(".prediction." + stat + " .current-badge .badge-icon-75").addClass(data.prediction.badge.toLowerCase().replace(" ", ""));
						$(".prediction." + stat + " .current-badge .badge-icon-75").addClass(data.prediction.current.toString().toLowerCase());

						if (data.prediction.next != null) {
							$(".prediction." + stat + " .next-badge .badge-icon-75").addClass(data.prediction.badge.toString().toLowerCase().replace(" ", ""));
							$(".prediction." + stat + " .next-badge .badge-icon-75").addClass(data.prediction.next.toString().toLowerCase());
							$(".prediction." + stat + " .next-badge .badge-icon-75").css("opacity", data.prediction.progress / 1.5);
							msg = "You have " + data.prediction.amount_remaining + " " + data.prediction.unit + " remaining for the " + data.prediction.next + " badge.<p/>At your average rate of " + data.prediction.rate + " per day, that should take " + data.prediction.days_remaining + " days.";
						}
						else {
							$(".prediction." + stat + " .badge-prediction").css("display", "block");
							msg += "Your average rate is " + data.prediction.rate + " " + data.prediction.unit + " per day";
						}
					}
	
					$(".prediction." + stat + " .badge-prediction").html(msg);
				}
				else {
					$(".prediction." + stat + " .summary .current-badge").hide();
					$(".prediction." + stat + " .summary .next-badge").hide();
					$(".prediction." + stat + " .rate").html("Your average rate is " + data.prediction.rate + " " + data.prediction.unit + " per day.");
				}

				CHART_WIDTH_MAX = 400;
				CONTAINER_WIDTH_MAX = 500;
				containerWidth = window.innerWidth > CONTAINER_WIDTH_MAX ? CONTAINER_WIDTH_MAX : window.innerWidth - 15;
				left = (containerWidth - CHART_WIDTH_MAX) / 2;
				left = left < 0 ? 0 : left;
				chartWidth = (containerWidth < CHART_WIDTH_MAX) ? containerWidth : CHART_WIDTH_MAX - 10;

				dates = data.data.shift();
				data.data[0].color = "{{ faction_color }}";
				data.data[0].marker = { "enabled" : true };
				data.data[1].color = "#DC3912";
				data.data[1].marker = { "enabled" : false };

				$("#graph-" + stat).highcharts({
					chart: {
						backgroundColor: "#000",
						plotBackgroundColor: "#000"
					},
					credits: { enabled: false },
					legend : {
						align: "left",
						floating: true,
						itemStyle : {
							color: "#FFF",
							fontWeight: "normal"
						},
						itemHoverStyle: { color: "#FFF" },
						layout: "vertical",
						verticalAlign: "top",
						x: 75
					},
					title : { text: null },
					series: data.data,
					xAxis: {
						categories: dates.data,
						labels: {
							rotation: -40,
							step: 3,
							style: {
								color: "{{ chartLabelColor }}"
							}
						},
						lineColor: "{{ chartLabelColor }}",
						tickColor: "{{ chartLabelColor }}"
					},
					yAxis: {
						gridLineColor: "{{ chartLabelColor }}",
						labels: {
							style: {
								color: "{{ chartLabelColor }}"
							}
						},
						lineColor: "{{ chartLabelColor }}",
						title: {
							style: {
								color: "{{ chartLabelColor }}"
							},
							text: name
						}
					}
				});
			}
		});
	}

{% for stat in stats if stat.graphable %}
	loadStatPrediction("{{ stat.stat }}", "{{ stat.name }}");
{% endfor %}
}
</script>
