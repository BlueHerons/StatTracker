var StatTracker = new function() {
    this.pageToLoad = "dashboard";
    this.message = null;

    this.loadPage = function() {
        $(".tabs li[class~='" + this.pageToLoad +"'] a").addClass("selected");
        $.ajax({url: "{{ app.request.basepath }}/page/" + this.pageToLoad,
            type: "GET",
            dataType: "html",
            data: location.search.substring(1),
            statusCode: {
                500: function() {
                    alert("Internal Server Error");
                }
            },
            success: function(html) {
                $("#main-content").html(html);
                                if (document.body.scrollHeight <= document.body.offsetHeight) {
                                    $("#main-content").css("height", "inherit");
                                }
                onPageLoad();
            }
        });
    }

    this.authenticate = function() {
        $.ajax({url: "{{ app.request.basepath }}/authenticate?action=login",
            type: 'GET',
            contentType: 'json',
            success: function(result) {
                if (typeof result !== "object")
                    result = JSON.parse(result);
                if (result.status == "authentication_required") {
                    $(".loading").hide();
                    $("#login-dialog").show();

                    for (i in result.providers) {
                        var p = result.providers[i];
                        $("#login-buttons").append(
                            $("<div/>").addClass(p.name).html(
                                $("<a/>").attr("href", p.url)
                            )
                        );
                    }

                    $("#login-buttons .google a").attr("href", result.url);
                    if (document.body.scrollHeight <= document.body.offsetHeight) {
                        $("#main-content").css("height", "inherit");
                    }
                }
                else if (result.status == "registration_required") {
                                        $(".loading").hide();
                                        $("#main-content").css("height", "inherit");
                    $("#login-buttons").hide();
                    $("#login-dialog").show();
                    $("#login-message").html(result.message);
                }
                else if (result.status == "okay") {
                    $("#login-dialog").hide();
                    if (!result.agent.has_submitted) {
                        StatTracker.message = "Stats must be submitted before this tool can be utilized.";
                        StatTracker.pageToLoad = "submit-stats";
                    }

                    StatTracker.loadPage();
                }
                else if (result.status == "logged_out") {
                    $(".loading").hide();
                    $("#login-dialog").show();
                    $("#main-content").css("height", "inherit");
                    $("#login-message").html("You have been logged out. Refresh this page to log in again.");
                }
            },
            processData: false
        });
    }

    this.logout = function() {
        $.ajax({url: "{{ app.request.basepath }}/authenticate?action=logout",
            type: 'GET',
            contentType: 'json',
            success: function(result) {
                if (typeof result !== "object") {
                    result = JSON.parse(result);
                }
                if (result.status == "logged_out") {
                    window.location = "{{ app.request.basepath }}";
                }
                console.log(result);
            },
            processData: false
        });
    }

    this.getQueryVar = function(variable) {
        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i=0;i<vars.length;i++) {
            var pair = vars[i].split("=");
            if (pair[0] == variable){return pair[1];}
        }
        return(false);
    }
};

var format = function(number) {
    return numeral(number).format("0,0.[00]");
}
